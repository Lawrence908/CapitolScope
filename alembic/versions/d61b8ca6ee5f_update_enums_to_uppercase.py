"""update_enums_to_uppercase

Revision ID: d61b8ca6ee5f
Revises: b329f6fb84f6
Create Date: 2025-07-10 09:34:32.944261

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'd61b8ca6ee5f'
down_revision = 'b329f6fb84f6'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Update enum values to uppercase
    # PostgreSQL doesn't allow direct enum value modification, so we need to:
    # 1. Drop check constraints that reference enum values
    # 2. Rename old enum types
    # 3. Create new enum types with uppercase values
    # 4. Update columns to use new enum types
    # 5. Drop old enum types
    # 6. Recreate check constraints with uppercase values
    
    # Drop check constraints that reference enum values
    op.execute("ALTER TABLE users DROP CONSTRAINT IF EXISTS check_auth_provider")
    op.execute("ALTER TABLE users DROP CONSTRAINT IF EXISTS check_user_status")
    op.execute("ALTER TABLE users DROP CONSTRAINT IF EXISTS check_user_role")
    op.execute("ALTER TABLE user_notifications DROP CONSTRAINT IF EXISTS check_notification_type")
    op.execute("ALTER TABLE user_notifications DROP CONSTRAINT IF EXISTS check_notification_channel")
    
    # Rename old enum types
    op.execute("ALTER TYPE authprovider RENAME TO authprovider_old")
    op.execute("ALTER TYPE userstatus RENAME TO userstatus_old")
    op.execute("ALTER TYPE userrole RENAME TO userrole_old")
    op.execute("ALTER TYPE notificationtype RENAME TO notificationtype_old")
    op.execute("ALTER TYPE notificationchannel RENAME TO notificationchannel_old")
    
    # Create new enum types with uppercase values
    op.execute("CREATE TYPE authprovider AS ENUM ('EMAIL', 'GOOGLE', 'GITHUB', 'TWITTER')")
    op.execute("CREATE TYPE userstatus AS ENUM ('ACTIVE', 'INACTIVE', 'SUSPENDED', 'PENDING_VERIFICATION')")
    op.execute("CREATE TYPE userrole AS ENUM ('USER', 'MODERATOR', 'ADMIN', 'SUPER_ADMIN')")
    op.execute("CREATE TYPE notificationtype AS ENUM ('TRADE_ALERT', 'PORTFOLIO_UPDATE', 'NEWS_DIGEST', 'SYSTEM_ANNOUNCEMENT', 'SUBSCRIPTION_UPDATE')")
    op.execute("CREATE TYPE notificationchannel AS ENUM ('EMAIL', 'SMS', 'PUSH', 'IN_APP')")
    
    # Update users table columns
    op.execute("""
        ALTER TABLE users 
        ALTER COLUMN auth_provider TYPE authprovider 
        USING UPPER(auth_provider::text)::authprovider
    """)
    op.execute("""
        ALTER TABLE users 
        ALTER COLUMN status TYPE userstatus 
        USING UPPER(status::text)::userstatus
    """)
    op.execute("""
        ALTER TABLE users 
        ALTER COLUMN role TYPE userrole 
        USING UPPER(role::text)::userrole
    """)
    
    # Update user_notifications table columns
    op.execute("""
        ALTER TABLE user_notifications 
        ALTER COLUMN notification_type TYPE notificationtype 
        USING UPPER(notification_type::text)::notificationtype
    """)
    op.execute("""
        ALTER TABLE user_notifications 
        ALTER COLUMN channel TYPE notificationchannel 
        USING UPPER(channel::text)::notificationchannel
    """)
    
    # Drop old enum types
    op.execute("DROP TYPE authprovider_old")
    op.execute("DROP TYPE userstatus_old")
    op.execute("DROP TYPE userrole_old")
    op.execute("DROP TYPE notificationtype_old")
    op.execute("DROP TYPE notificationchannel_old")
    
    # Recreate check constraints with uppercase values
    op.execute("ALTER TABLE users ADD CONSTRAINT check_auth_provider CHECK (auth_provider IN ('EMAIL', 'GOOGLE', 'GITHUB', 'TWITTER'))")
    op.execute("ALTER TABLE users ADD CONSTRAINT check_user_status CHECK (status IN ('ACTIVE', 'INACTIVE', 'SUSPENDED', 'PENDING_VERIFICATION'))")
    op.execute("ALTER TABLE users ADD CONSTRAINT check_user_role CHECK (role IN ('USER', 'MODERATOR', 'ADMIN', 'SUPER_ADMIN'))")
    op.execute("ALTER TABLE user_notifications ADD CONSTRAINT check_notification_type CHECK (notification_type IN ('TRADE_ALERT', 'PORTFOLIO_UPDATE', 'NEWS_DIGEST', 'SYSTEM_ANNOUNCEMENT', 'SUBSCRIPTION_UPDATE'))")
    op.execute("ALTER TABLE user_notifications ADD CONSTRAINT check_notification_channel CHECK (channel IN ('EMAIL', 'SMS', 'PUSH', 'IN_APP'))")
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Reverse the enum changes (convert back to lowercase)
    
    # Rename current enum types
    op.execute("ALTER TYPE authprovider RENAME TO authprovider_new")
    op.execute("ALTER TYPE userstatus RENAME TO userstatus_new")
    op.execute("ALTER TYPE userrole RENAME TO userrole_new")
    op.execute("ALTER TYPE notificationtype RENAME TO notificationtype_new")
    op.execute("ALTER TYPE notificationchannel RENAME TO notificationchannel_new")
    
    # Create old enum types with lowercase values
    op.execute("CREATE TYPE authprovider AS ENUM ('email', 'google', 'github', 'twitter')")
    op.execute("CREATE TYPE userstatus AS ENUM ('active', 'inactive', 'suspended', 'pending_verification')")
    op.execute("CREATE TYPE userrole AS ENUM ('user', 'moderator', 'admin', 'super_admin')")
    op.execute("CREATE TYPE notificationtype AS ENUM ('trade_alert', 'portfolio_update', 'news_digest', 'system_announcement', 'subscription_update')")
    op.execute("CREATE TYPE notificationchannel AS ENUM ('email', 'sms', 'push', 'in_app')")
    
    # Update users table columns back to lowercase
    op.execute("""
        ALTER TABLE users 
        ALTER COLUMN auth_provider TYPE authprovider 
        USING LOWER(auth_provider::text)::authprovider
    """)
    op.execute("""
        ALTER TABLE users 
        ALTER COLUMN status TYPE userstatus 
        USING LOWER(status::text)::userstatus
    """)
    op.execute("""
        ALTER TABLE users 
        ALTER COLUMN role TYPE userrole 
        USING LOWER(role::text)::userrole
    """)
    
    # Update user_notifications table columns back to lowercase
    op.execute("""
        ALTER TABLE user_notifications 
        ALTER COLUMN notification_type TYPE notificationtype 
        USING LOWER(notification_type::text)::notificationtype
    """)
    op.execute("""
        ALTER TABLE user_notifications 
        ALTER COLUMN channel TYPE notificationchannel 
        USING LOWER(channel::text)::notificationchannel
    """)
    
    # Drop new enum types
    op.execute("DROP TYPE authprovider_new")
    op.execute("DROP TYPE userstatus_new")
    op.execute("DROP TYPE userrole_new")
    op.execute("DROP TYPE notificationtype_new")
    op.execute("DROP TYPE notificationchannel_new")
    
    # ### end Alembic commands ### 