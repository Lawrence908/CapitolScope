"""Initial migration - create all tables

Revision ID: d66bb0f18e50
Revises: 
Create Date: 2025-07-08 22:04:27.457212

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'd66bb0f18e50'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('asset_types',
    sa.Column('code', sa.String(length=5), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=50), nullable=True),
    sa.Column('risk_level', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('asset_types', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_asset_types_code'), ['code'], unique=True)

    op.create_table('congress_members',
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('full_name', sa.String(length=200), nullable=False),
    sa.Column('party', sa.String(length=1), nullable=True),
    sa.Column('chamber', sa.String(length=6), nullable=False),
    sa.Column('state', sa.String(length=2), nullable=False),
    sa.Column('district', sa.String(length=10), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('office_address', sa.Text(), nullable=True),
    sa.Column('bioguide_id', sa.String(length=10), nullable=True),
    sa.Column('congress_gov_id', sa.String(length=20), nullable=True),
    sa.Column('term_start', sa.Date(), nullable=True),
    sa.Column('term_end', sa.Date(), nullable=True),
    sa.Column('congress_number', sa.Integer(), nullable=True),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('education', sa.Text(), nullable=True),
    sa.Column('profession', sa.String(length=200), nullable=True),
    sa.Column('committees', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('leadership_roles', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('twitter_handle', sa.String(length=50), nullable=True),
    sa.Column('facebook_url', sa.String(length=255), nullable=True),
    sa.Column('website_url', sa.String(length=255), nullable=True),
    sa.Column('seniority_rank', sa.Integer(), nullable=True),
    sa.Column('vote_percentage', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('influence_score', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('fundraising_total', sa.BigInteger(), nullable=True),
    sa.Column('pac_contributions', sa.BigInteger(), nullable=True),
    sa.Column('wikipedia_url', sa.String(length=255), nullable=True),
    sa.Column('ballotpedia_url', sa.String(length=255), nullable=True),
    sa.Column('opensecrets_url', sa.String(length=255), nullable=True),
    sa.Column('govtrack_id', sa.String(length=20), nullable=True),
    sa.Column('votesmart_id', sa.String(length=20), nullable=True),
    sa.Column('fec_id', sa.String(length=20), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.String(length=255), nullable=True),
    sa.Column('updated_by', sa.String(length=255), nullable=True),
    sa.CheckConstraint("chamber IN ('House', 'Senate')", name='check_chamber'),
    sa.CheckConstraint("party IN ('D', 'R', 'I')", name='check_party'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('congress_members', schema=None) as batch_op:
        batch_op.create_index('idx_congress_member_name', ['first_name', 'last_name'], unique=False)
        batch_op.create_index('idx_congress_member_party_chamber', ['party', 'chamber'], unique=False)
        batch_op.create_index('idx_congress_member_state_district', ['state', 'district'], unique=False)
        batch_op.create_index(batch_op.f('ix_congress_members_bioguide_id'), ['bioguide_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_congress_members_chamber'), ['chamber'], unique=False)
        batch_op.create_index(batch_op.f('ix_congress_members_congress_gov_id'), ['congress_gov_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_congress_members_first_name'), ['first_name'], unique=False)
        batch_op.create_index(batch_op.f('ix_congress_members_full_name'), ['full_name'], unique=False)
        batch_op.create_index(batch_op.f('ix_congress_members_last_name'), ['last_name'], unique=False)
        batch_op.create_index(batch_op.f('ix_congress_members_party'), ['party'], unique=False)
        batch_op.create_index(batch_op.f('ix_congress_members_state'), ['state'], unique=False)

    op.create_table('exchanges',
    sa.Column('code', sa.String(length=10), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('country', sa.String(length=3), nullable=False),
    sa.Column('timezone', sa.String(length=50), nullable=False),
    sa.Column('trading_hours', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('market_cap_rank', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('exchanges', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_exchanges_code'), ['code'], unique=True)

    op.create_table('sectors',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('gics_code', sa.String(length=10), nullable=True),
    sa.Column('parent_sector_id', sa.Integer(), nullable=True),
    sa.Column('market_sensitivity', sa.Numeric(precision=5, scale=4), nullable=True),
    sa.Column('volatility_score', sa.Numeric(precision=5, scale=4), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['parent_sector_id'], ['sectors.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('sectors', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_sectors_gics_code'), ['gics_code'], unique=False)
        batch_op.create_index(batch_op.f('ix_sectors_name'), ['name'], unique=True)

    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=True),
    sa.Column('first_name', sa.String(length=100), nullable=True),
    sa.Column('last_name', sa.String(length=100), nullable=True),
    sa.Column('full_name', sa.String(length=200), nullable=True),
    sa.Column('password_hash', sa.String(length=255), nullable=True),
    sa.Column('auth_provider', sa.String(length=20), nullable=False),
    sa.Column('provider_id', sa.String(length=255), nullable=True),
    sa.Column('status', sa.String(length=30), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('email_verified_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('avatar_url', sa.String(length=500), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('location', sa.String(length=200), nullable=True),
    sa.Column('website_url', sa.String(length=500), nullable=True),
    sa.Column('is_public_profile', sa.Boolean(), nullable=False),
    sa.Column('show_portfolio', sa.Boolean(), nullable=False),
    sa.Column('show_trading_activity', sa.Boolean(), nullable=False),
    sa.Column('subscription_tier', sa.String(length=20), nullable=False),
    sa.Column('subscription_status', sa.String(length=20), nullable=True),
    sa.Column('subscription_start_date', sa.Date(), nullable=True),
    sa.Column('subscription_end_date', sa.Date(), nullable=True),
    sa.Column('stripe_customer_id', sa.String(length=100), nullable=True),
    sa.Column('api_calls_count', sa.Integer(), nullable=False),
    sa.Column('api_calls_reset_date', sa.Date(), nullable=True),
    sa.Column('last_active_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('beta_features_enabled', sa.Boolean(), nullable=False),
    sa.Column('marketing_emails_enabled', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by', sa.String(length=255), nullable=True),
    sa.Column('updated_by', sa.String(length=255), nullable=True),
    sa.CheckConstraint("auth_provider IN ('email', 'google', 'github', 'twitter')", name='check_auth_provider'),
    sa.CheckConstraint("status IN ('active', 'inactive', 'suspended', 'pending_verification')", name='check_user_status'),
    sa.CheckConstraint("subscription_tier IN ('free', 'pro', 'premium', 'enterprise')", name='check_subscription_tier'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index('idx_user_email_provider', ['email', 'auth_provider'], unique=False)
        batch_op.create_index('idx_user_status_verified', ['status', 'is_verified'], unique=False)
        batch_op.create_index('idx_user_subscription', ['subscription_tier', 'subscription_status'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_stripe_customer_id'), ['stripe_customer_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

    op.create_table('portfolio_performance',
    sa.Column('member_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('total_value', sa.BigInteger(), nullable=False),
    sa.Column('total_cost_basis', sa.BigInteger(), nullable=False),
    sa.Column('unrealized_gain_loss', sa.BigInteger(), nullable=False),
    sa.Column('realized_gain_loss', sa.BigInteger(), nullable=False),
    sa.Column('daily_return', sa.Numeric(precision=8, scale=6), nullable=True),
    sa.Column('daily_gain_loss', sa.BigInteger(), nullable=True),
    sa.Column('benchmark_return', sa.Numeric(precision=8, scale=6), nullable=True),
    sa.Column('alpha', sa.Numeric(precision=8, scale=6), nullable=True),
    sa.Column('beta', sa.Numeric(precision=8, scale=6), nullable=True),
    sa.Column('volatility', sa.Numeric(precision=8, scale=6), nullable=True),
    sa.Column('sharpe_ratio', sa.Numeric(precision=8, scale=6), nullable=True),
    sa.Column('max_drawdown', sa.Numeric(precision=8, scale=6), nullable=True),
    sa.Column('position_count', sa.Integer(), nullable=True),
    sa.Column('sector_allocation', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('top_holdings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['member_id'], ['congress_members.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('member_id', 'date', name='unique_member_date')
    )
    with op.batch_alter_table('portfolio_performance', schema=None) as batch_op:
        batch_op.create_index('idx_portfolio_performance_date', ['date'], unique=False)
        batch_op.create_index('idx_portfolio_performance_member_date', ['member_id', 'date'], unique=False)
        batch_op.create_index(batch_op.f('ix_portfolio_performance_date'), ['date'], unique=False)
        batch_op.create_index(batch_op.f('ix_portfolio_performance_member_id'), ['member_id'], unique=False)

    op.create_table('securities',
    sa.Column('ticker', sa.String(length=20), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('asset_type_id', sa.Integer(), nullable=True),
    sa.Column('sector_id', sa.Integer(), nullable=True),
    sa.Column('exchange_id', sa.Integer(), nullable=True),
    sa.Column('currency', sa.String(length=3), nullable=True),
    sa.Column('market_cap', sa.BigInteger(), nullable=True),
    sa.Column('shares_outstanding', sa.BigInteger(), nullable=True),
    sa.Column('isin', sa.String(length=12), nullable=True),
    sa.Column('cusip', sa.String(length=9), nullable=True),
    sa.Column('figi', sa.String(length=12), nullable=True),
    sa.Column('beta', sa.Numeric(precision=8, scale=6), nullable=True),
    sa.Column('pe_ratio', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('dividend_yield', sa.Numeric(precision=8, scale=6), nullable=True),
    sa.Column('volatility_30d', sa.Numeric(precision=8, scale=6), nullable=True),
    sa.Column('volume_avg_30d', sa.BigInteger(), nullable=True),
    sa.Column('esg_score', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('controversy_score', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['asset_type_id'], ['asset_types.id'], ),
    sa.ForeignKeyConstraint(['exchange_id'], ['exchanges.id'], ),
    sa.ForeignKeyConstraint(['sector_id'], ['sectors.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('ticker', 'exchange_id', name='unique_ticker_exchange')
    )
    with op.batch_alter_table('securities', schema=None) as batch_op:
        batch_op.create_index('idx_security_active', ['is_active'], unique=False)
        batch_op.create_index('idx_security_name', ['name'], unique=False)
        batch_op.create_index('idx_security_ticker', ['ticker'], unique=False)
        batch_op.create_index(batch_op.f('ix_securities_asset_type_id'), ['asset_type_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_securities_cusip'), ['cusip'], unique=True)
        batch_op.create_index(batch_op.f('ix_securities_exchange_id'), ['exchange_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_securities_figi'), ['figi'], unique=True)
        batch_op.create_index(batch_op.f('ix_securities_isin'), ['isin'], unique=True)
        batch_op.create_index(batch_op.f('ix_securities_sector_id'), ['sector_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_securities_ticker'), ['ticker'], unique=False)

    op.create_table('user_alerts',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('alert_type', sa.String(length=30), nullable=False),
    sa.Column('target_type', sa.String(length=20), nullable=True),
    sa.Column('target_id', sa.Integer(), nullable=True),
    sa.Column('target_criteria', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('conditions', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('threshold_value', sa.BigInteger(), nullable=True),
    sa.Column('comparison_operator', sa.String(length=10), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('notification_channels', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('frequency_limit', sa.String(length=20), nullable=True),
    sa.Column('last_triggered', sa.DateTime(timezone=True), nullable=True),
    sa.Column('trigger_count', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("alert_type IN ('new_trade', 'large_trade', 'price_movement', 'volume_spike', 'portfolio_change', 'member_activity', 'market_event')", name='check_alert_type'),
    sa.CheckConstraint("comparison_operator IN ('>', '<', '>=', '<=', '=', '!=')", name='check_comparison_operator'),
    sa.CheckConstraint("target_type IN ('security', 'member', 'portfolio', 'market')", name='check_target_type'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('user_alerts', schema=None) as batch_op:
        batch_op.create_index('idx_user_alert_type_target', ['alert_type', 'target_type'], unique=False)
        batch_op.create_index('idx_user_alert_user_active', ['user_id', 'is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_alerts_user_id'), ['user_id'], unique=False)

    op.create_table('user_api_keys',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('key_id', sa.UUID(), nullable=False),
    sa.Column('key_hash', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('scopes', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('rate_limit_per_hour', sa.Integer(), nullable=True),
    sa.Column('rate_limit_per_day', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('usage_count', sa.BigInteger(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('key_id')
    )
    with op.batch_alter_table('user_api_keys', schema=None) as batch_op:
        batch_op.create_index('idx_user_api_key_expires', ['expires_at'], unique=False)
        batch_op.create_index('idx_user_api_key_user_active', ['user_id', 'is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_api_keys_user_id'), ['user_id'], unique=False)

    op.create_table('user_notifications',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('notification_type', sa.String(length=30), nullable=False),
    sa.Column('channel', sa.String(length=10), nullable=False),
    sa.Column('priority', sa.String(length=10), nullable=True),
    sa.Column('is_read', sa.Boolean(), nullable=False),
    sa.Column('read_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('sent_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('delivery_status', sa.String(length=20), nullable=True),
    sa.Column('related_entity_type', sa.String(length=20), nullable=True),
    sa.Column('related_entity_id', sa.Integer(), nullable=True),
    sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("channel IN ('email', 'sms', 'push', 'in_app')", name='check_notification_channel'),
    sa.CheckConstraint("delivery_status IN ('pending', 'sent', 'delivered', 'failed')", name='check_delivery_status'),
    sa.CheckConstraint("notification_type IN ('trade_alert', 'portfolio_update', 'news_digest', 'system_announcement', 'subscription_update')", name='check_notification_type'),
    sa.CheckConstraint("priority IN ('low', 'normal', 'high', 'urgent')", name='check_notification_priority'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('user_notifications', schema=None) as batch_op:
        batch_op.create_index('idx_user_notification_delivery', ['delivery_status', 'sent_at'], unique=False)
        batch_op.create_index('idx_user_notification_type_priority', ['notification_type', 'priority'], unique=False)
        batch_op.create_index('idx_user_notification_user_read', ['user_id', 'is_read'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_notifications_user_id'), ['user_id'], unique=False)

    op.create_table('user_preferences',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('theme', sa.String(length=20), nullable=True),
    sa.Column('language', sa.String(length=5), nullable=True),
    sa.Column('timezone', sa.String(length=50), nullable=True),
    sa.Column('currency', sa.String(length=3), nullable=True),
    sa.Column('default_trade_filters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('preferred_chart_timeframe', sa.String(length=10), nullable=True),
    sa.Column('show_after_hours_trading', sa.Boolean(), nullable=True),
    sa.Column('email_notifications', sa.Boolean(), nullable=True),
    sa.Column('push_notifications', sa.Boolean(), nullable=True),
    sa.Column('sms_notifications', sa.Boolean(), nullable=True),
    sa.Column('large_trade_threshold', sa.BigInteger(), nullable=True),
    sa.Column('price_movement_threshold', sa.Integer(), nullable=True),
    sa.Column('public_watchlists', sa.Boolean(), nullable=True),
    sa.Column('share_analytics', sa.Boolean(), nullable=True),
    sa.Column('custom_settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', name='unique_user_preferences')
    )
    with op.batch_alter_table('user_preferences', schema=None) as batch_op:
        batch_op.create_index('idx_user_preference_user', ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_preferences_user_id'), ['user_id'], unique=False)

    op.create_table('user_sessions',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.String(length=255), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('device_type', sa.String(length=20), nullable=True),
    sa.Column('browser', sa.String(length=50), nullable=True),
    sa.Column('os', sa.String(length=50), nullable=True),
    sa.Column('country', sa.String(length=2), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('last_activity', sa.DateTime(timezone=True), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('login_method', sa.String(length=20), nullable=True),
    sa.Column('is_suspicious', sa.Boolean(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("device_type IN ('desktop', 'mobile', 'tablet', 'api', 'unknown')", name='check_device_type'),
    sa.CheckConstraint("login_method IN ('password', 'oauth', 'api_key', 'token')", name='check_login_method'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('user_sessions', schema=None) as batch_op:
        batch_op.create_index('idx_user_session_expires', ['expires_at'], unique=False)
        batch_op.create_index('idx_user_session_suspicious', ['is_suspicious'], unique=False)
        batch_op.create_index('idx_user_session_user_active', ['user_id', 'is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_sessions_session_id'), ['session_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_user_sessions_user_id'), ['user_id'], unique=False)

    op.create_table('user_watchlists',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('watchlist_type', sa.String(length=20), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('is_default', sa.Boolean(), nullable=True),
    sa.Column('sort_order', sa.Integer(), nullable=True),
    sa.Column('watched_securities', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('watched_members', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('item_count', sa.Integer(), nullable=True),
    sa.Column('last_updated', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("watchlist_type IN ('securities', 'members', 'mixed')", name='check_watchlist_type'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('user_watchlists', schema=None) as batch_op:
        batch_op.create_index('idx_user_watchlist_public', ['is_public'], unique=False)
        batch_op.create_index('idx_user_watchlist_user_type', ['user_id', 'watchlist_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_watchlists_user_id'), ['user_id'], unique=False)

    op.create_table('congressional_trades',
    sa.Column('member_id', sa.Integer(), nullable=False),
    sa.Column('security_id', sa.Integer(), nullable=True),
    sa.Column('doc_id', sa.String(length=50), nullable=False),
    sa.Column('document_url', sa.String(length=500), nullable=True),
    sa.Column('owner', sa.String(length=10), nullable=True),
    sa.Column('raw_asset_description', sa.Text(), nullable=False),
    sa.Column('ticker', sa.String(length=20), nullable=True),
    sa.Column('asset_name', sa.String(length=300), nullable=True),
    sa.Column('asset_type', sa.String(length=100), nullable=True),
    sa.Column('transaction_type', sa.String(length=2), nullable=False),
    sa.Column('transaction_date', sa.Date(), nullable=False),
    sa.Column('notification_date', sa.Date(), nullable=False),
    sa.Column('amount_min', sa.BigInteger(), nullable=True),
    sa.Column('amount_max', sa.BigInteger(), nullable=True),
    sa.Column('amount_exact', sa.BigInteger(), nullable=True),
    sa.Column('filing_status', sa.String(length=1), nullable=True),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('cap_gains_over_200', sa.Boolean(), nullable=True),
    sa.Column('ticker_confidence', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('amount_confidence', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('parsed_successfully', sa.Boolean(), nullable=True),
    sa.Column('parsing_notes', sa.Text(), nullable=True),
    sa.Column('market_cap_at_trade', sa.BigInteger(), nullable=True),
    sa.Column('price_at_trade', sa.Integer(), nullable=True),
    sa.Column('volume_at_trade', sa.BigInteger(), nullable=True),
    sa.Column('price_change_1d', sa.Numeric(precision=8, scale=6), nullable=True),
    sa.Column('price_change_7d', sa.Numeric(precision=8, scale=6), nullable=True),
    sa.Column('price_change_30d', sa.Numeric(precision=8, scale=6), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by', sa.String(length=255), nullable=True),
    sa.Column('updated_by', sa.String(length=255), nullable=True),
    sa.CheckConstraint("filing_status IN ('N', 'P', 'A')", name='check_filing_status'),
    sa.CheckConstraint("owner IN ('SP', 'JT', 'DC', 'C')", name='check_owner'),
    sa.CheckConstraint("transaction_type IN ('P', 'S', 'E')", name='check_transaction_type'),
    sa.ForeignKeyConstraint(['member_id'], ['congress_members.id'], ),
    sa.ForeignKeyConstraint(['security_id'], ['securities.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('congressional_trades', schema=None) as batch_op:
        batch_op.create_index('idx_congressional_trade_member_date', ['member_id', 'transaction_date'], unique=False)
        batch_op.create_index('idx_congressional_trade_security_date', ['security_id', 'transaction_date'], unique=False)
        batch_op.create_index('idx_congressional_trade_ticker_date', ['ticker', 'transaction_date'], unique=False)
        batch_op.create_index('idx_congressional_trade_type_date', ['transaction_type', 'transaction_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_congressional_trades_doc_id'), ['doc_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_congressional_trades_member_id'), ['member_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_congressional_trades_notification_date'), ['notification_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_congressional_trades_security_id'), ['security_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_congressional_trades_ticker'), ['ticker'], unique=False)
        batch_op.create_index(batch_op.f('ix_congressional_trades_transaction_date'), ['transaction_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_congressional_trades_transaction_type'), ['transaction_type'], unique=False)

    op.create_table('corporate_actions',
    sa.Column('security_id', sa.Integer(), nullable=False),
    sa.Column('action_type', sa.String(length=20), nullable=False),
    sa.Column('ex_date', sa.Date(), nullable=False),
    sa.Column('record_date', sa.Date(), nullable=True),
    sa.Column('payment_date', sa.Date(), nullable=True),
    sa.Column('ratio', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('amount', sa.Integer(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('price_impact_1d', sa.Numeric(precision=8, scale=6), nullable=True),
    sa.Column('volume_impact_1d', sa.Numeric(precision=8, scale=6), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("action_type IN ('split', 'dividend', 'spinoff', 'merger', 'rights_offering')", name='check_action_type'),
    sa.CheckConstraint('amount >= 0', name='check_amount_positive'),
    sa.CheckConstraint('ratio > 0', name='check_ratio_positive'),
    sa.ForeignKeyConstraint(['security_id'], ['securities.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('corporate_actions', schema=None) as batch_op:
        batch_op.create_index('idx_corporate_action_security_date', ['security_id', 'ex_date'], unique=False)
        batch_op.create_index('idx_corporate_action_type', ['action_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_corporate_actions_action_type'), ['action_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_corporate_actions_ex_date'), ['ex_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_corporate_actions_payment_date'), ['payment_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_corporate_actions_record_date'), ['record_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_corporate_actions_security_id'), ['security_id'], unique=False)

    op.create_table('daily_prices',
    sa.Column('security_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('open_price', sa.Integer(), nullable=False),
    sa.Column('high_price', sa.Integer(), nullable=False),
    sa.Column('low_price', sa.Integer(), nullable=False),
    sa.Column('close_price', sa.Integer(), nullable=False),
    sa.Column('adjusted_close', sa.Integer(), nullable=True),
    sa.Column('volume', sa.BigInteger(), nullable=False),
    sa.Column('rsi_14', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('macd', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('bollinger_upper', sa.Integer(), nullable=True),
    sa.Column('bollinger_lower', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint('close_price >= 0', name='check_close_price_positive'),
    sa.CheckConstraint('high_price >= 0', name='check_high_price_positive'),
    sa.CheckConstraint('high_price >= low_price', name='check_high_ge_low'),
    sa.CheckConstraint('low_price >= 0', name='check_low_price_positive'),
    sa.CheckConstraint('open_price >= 0', name='check_open_price_positive'),
    sa.CheckConstraint('volume >= 0', name='check_volume_positive'),
    sa.ForeignKeyConstraint(['security_id'], ['securities.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('security_id', 'date', name='unique_security_date')
    )
    with op.batch_alter_table('daily_prices', schema=None) as batch_op:
        batch_op.create_index('idx_daily_price_date', ['date'], unique=False)
        batch_op.create_index('idx_daily_price_security_date', ['security_id', 'date'], unique=False)
        batch_op.create_index(batch_op.f('ix_daily_prices_date'), ['date'], unique=False)
        batch_op.create_index(batch_op.f('ix_daily_prices_security_id'), ['security_id'], unique=False)

    op.create_table('member_portfolios',
    sa.Column('member_id', sa.Integer(), nullable=False),
    sa.Column('security_id', sa.Integer(), nullable=False),
    sa.Column('shares', sa.Numeric(precision=15, scale=6), nullable=False),
    sa.Column('cost_basis', sa.BigInteger(), nullable=False),
    sa.Column('avg_cost_per_share', sa.BigInteger(), nullable=True),
    sa.Column('first_purchase_date', sa.Date(), nullable=True),
    sa.Column('last_transaction_date', sa.Date(), nullable=True),
    sa.Column('total_purchases', sa.Integer(), nullable=True),
    sa.Column('total_sales', sa.Integer(), nullable=True),
    sa.Column('unrealized_gain_loss', sa.BigInteger(), nullable=True),
    sa.Column('realized_gain_loss', sa.BigInteger(), nullable=True),
    sa.Column('position_size_percent', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('holding_period_days', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['member_id'], ['congress_members.id'], ),
    sa.ForeignKeyConstraint(['security_id'], ['securities.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('member_id', 'security_id', name='unique_member_security')
    )
    with op.batch_alter_table('member_portfolios', schema=None) as batch_op:
        batch_op.create_index('idx_member_portfolio_last_transaction', ['last_transaction_date'], unique=False)
        batch_op.create_index('idx_member_portfolio_member', ['member_id'], unique=False)
        batch_op.create_index('idx_member_portfolio_security', ['security_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_member_portfolios_first_purchase_date'), ['first_purchase_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_member_portfolios_last_transaction_date'), ['last_transaction_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_member_portfolios_member_id'), ['member_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_member_portfolios_security_id'), ['security_id'], unique=False)

    op.create_table('price_history_aggregates',
    sa.Column('security_id', sa.Integer(), nullable=False),
    sa.Column('period_type', sa.String(length=10), nullable=False),
    sa.Column('period_start', sa.Date(), nullable=False),
    sa.Column('period_end', sa.Date(), nullable=False),
    sa.Column('open_price', sa.Integer(), nullable=False),
    sa.Column('high_price', sa.Integer(), nullable=False),
    sa.Column('low_price', sa.Integer(), nullable=False),
    sa.Column('close_price', sa.Integer(), nullable=False),
    sa.Column('volume', sa.BigInteger(), nullable=False),
    sa.Column('total_return', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('volatility', sa.Numeric(precision=8, scale=6), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("period_type IN ('weekly', 'monthly', 'quarterly', 'yearly')", name='check_period_type'),
    sa.ForeignKeyConstraint(['security_id'], ['securities.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('security_id', 'period_type', 'period_start', name='unique_security_period')
    )
    with op.batch_alter_table('price_history_aggregates', schema=None) as batch_op:
        batch_op.create_index('idx_price_aggregate_security_period', ['security_id', 'period_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_price_history_aggregates_security_id'), ['security_id'], unique=False)

    op.create_table('security_watchlists',
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('security_id', sa.Integer(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('alert_price_target', sa.Integer(), nullable=True),
    sa.Column('alert_enabled', sa.Boolean(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['security_id'], ['securities.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'security_id', name='unique_user_security')
    )
    with op.batch_alter_table('security_watchlists', schema=None) as batch_op:
        batch_op.create_index('idx_watchlist_user', ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_security_watchlists_security_id'), ['security_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_security_watchlists_user_id'), ['user_id'], unique=False)

    op.create_table('trade_discussions',
    sa.Column('trade_id', sa.Integer(), nullable=False),
    sa.Column('topic_id', sa.Integer(), nullable=False),
    sa.Column('post_count', sa.Integer(), nullable=True),
    sa.Column('last_post_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['trade_id'], ['congressional_trades.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('trade_id', name='unique_trade_discussion')
    )
    with op.batch_alter_table('trade_discussions', schema=None) as batch_op:
        batch_op.create_index('idx_trade_discussion_topic', ['topic_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_trade_discussions_topic_id'), ['topic_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_trade_discussions_trade_id'), ['trade_id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('trade_discussions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_trade_discussions_trade_id'))
        batch_op.drop_index(batch_op.f('ix_trade_discussions_topic_id'))
        batch_op.drop_index('idx_trade_discussion_topic')

    op.drop_table('trade_discussions')
    with op.batch_alter_table('security_watchlists', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_security_watchlists_user_id'))
        batch_op.drop_index(batch_op.f('ix_security_watchlists_security_id'))
        batch_op.drop_index('idx_watchlist_user')

    op.drop_table('security_watchlists')
    with op.batch_alter_table('price_history_aggregates', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_price_history_aggregates_security_id'))
        batch_op.drop_index('idx_price_aggregate_security_period')

    op.drop_table('price_history_aggregates')
    with op.batch_alter_table('member_portfolios', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_member_portfolios_security_id'))
        batch_op.drop_index(batch_op.f('ix_member_portfolios_member_id'))
        batch_op.drop_index(batch_op.f('ix_member_portfolios_last_transaction_date'))
        batch_op.drop_index(batch_op.f('ix_member_portfolios_first_purchase_date'))
        batch_op.drop_index('idx_member_portfolio_security')
        batch_op.drop_index('idx_member_portfolio_member')
        batch_op.drop_index('idx_member_portfolio_last_transaction')

    op.drop_table('member_portfolios')
    with op.batch_alter_table('daily_prices', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_daily_prices_security_id'))
        batch_op.drop_index(batch_op.f('ix_daily_prices_date'))
        batch_op.drop_index('idx_daily_price_security_date')
        batch_op.drop_index('idx_daily_price_date')

    op.drop_table('daily_prices')
    with op.batch_alter_table('corporate_actions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_corporate_actions_security_id'))
        batch_op.drop_index(batch_op.f('ix_corporate_actions_record_date'))
        batch_op.drop_index(batch_op.f('ix_corporate_actions_payment_date'))
        batch_op.drop_index(batch_op.f('ix_corporate_actions_ex_date'))
        batch_op.drop_index(batch_op.f('ix_corporate_actions_action_type'))
        batch_op.drop_index('idx_corporate_action_type')
        batch_op.drop_index('idx_corporate_action_security_date')

    op.drop_table('corporate_actions')
    with op.batch_alter_table('congressional_trades', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_congressional_trades_transaction_type'))
        batch_op.drop_index(batch_op.f('ix_congressional_trades_transaction_date'))
        batch_op.drop_index(batch_op.f('ix_congressional_trades_ticker'))
        batch_op.drop_index(batch_op.f('ix_congressional_trades_security_id'))
        batch_op.drop_index(batch_op.f('ix_congressional_trades_notification_date'))
        batch_op.drop_index(batch_op.f('ix_congressional_trades_member_id'))
        batch_op.drop_index(batch_op.f('ix_congressional_trades_doc_id'))
        batch_op.drop_index('idx_congressional_trade_type_date')
        batch_op.drop_index('idx_congressional_trade_ticker_date')
        batch_op.drop_index('idx_congressional_trade_security_date')
        batch_op.drop_index('idx_congressional_trade_member_date')

    op.drop_table('congressional_trades')
    with op.batch_alter_table('user_watchlists', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_watchlists_user_id'))
        batch_op.drop_index('idx_user_watchlist_user_type')
        batch_op.drop_index('idx_user_watchlist_public')

    op.drop_table('user_watchlists')
    with op.batch_alter_table('user_sessions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_sessions_user_id'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_session_id'))
        batch_op.drop_index('idx_user_session_user_active')
        batch_op.drop_index('idx_user_session_suspicious')
        batch_op.drop_index('idx_user_session_expires')

    op.drop_table('user_sessions')
    with op.batch_alter_table('user_preferences', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_preferences_user_id'))
        batch_op.drop_index('idx_user_preference_user')

    op.drop_table('user_preferences')
    with op.batch_alter_table('user_notifications', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_notifications_user_id'))
        batch_op.drop_index('idx_user_notification_user_read')
        batch_op.drop_index('idx_user_notification_type_priority')
        batch_op.drop_index('idx_user_notification_delivery')

    op.drop_table('user_notifications')
    with op.batch_alter_table('user_api_keys', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_api_keys_user_id'))
        batch_op.drop_index('idx_user_api_key_user_active')
        batch_op.drop_index('idx_user_api_key_expires')

    op.drop_table('user_api_keys')
    with op.batch_alter_table('user_alerts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_alerts_user_id'))
        batch_op.drop_index('idx_user_alert_user_active')
        batch_op.drop_index('idx_user_alert_type_target')

    op.drop_table('user_alerts')
    with op.batch_alter_table('securities', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_securities_ticker'))
        batch_op.drop_index(batch_op.f('ix_securities_sector_id'))
        batch_op.drop_index(batch_op.f('ix_securities_isin'))
        batch_op.drop_index(batch_op.f('ix_securities_figi'))
        batch_op.drop_index(batch_op.f('ix_securities_exchange_id'))
        batch_op.drop_index(batch_op.f('ix_securities_cusip'))
        batch_op.drop_index(batch_op.f('ix_securities_asset_type_id'))
        batch_op.drop_index('idx_security_ticker')
        batch_op.drop_index('idx_security_name')
        batch_op.drop_index('idx_security_active')

    op.drop_table('securities')
    with op.batch_alter_table('portfolio_performance', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_portfolio_performance_member_id'))
        batch_op.drop_index(batch_op.f('ix_portfolio_performance_date'))
        batch_op.drop_index('idx_portfolio_performance_member_date')
        batch_op.drop_index('idx_portfolio_performance_date')

    op.drop_table('portfolio_performance')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.drop_index(batch_op.f('ix_users_stripe_customer_id'))
        batch_op.drop_index(batch_op.f('ix_users_email'))
        batch_op.drop_index('idx_user_subscription')
        batch_op.drop_index('idx_user_status_verified')
        batch_op.drop_index('idx_user_email_provider')

    op.drop_table('users')
    with op.batch_alter_table('sectors', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_sectors_name'))
        batch_op.drop_index(batch_op.f('ix_sectors_gics_code'))

    op.drop_table('sectors')
    with op.batch_alter_table('exchanges', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_exchanges_code'))

    op.drop_table('exchanges')
    with op.batch_alter_table('congress_members', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_congress_members_state'))
        batch_op.drop_index(batch_op.f('ix_congress_members_party'))
        batch_op.drop_index(batch_op.f('ix_congress_members_last_name'))
        batch_op.drop_index(batch_op.f('ix_congress_members_full_name'))
        batch_op.drop_index(batch_op.f('ix_congress_members_first_name'))
        batch_op.drop_index(batch_op.f('ix_congress_members_congress_gov_id'))
        batch_op.drop_index(batch_op.f('ix_congress_members_chamber'))
        batch_op.drop_index(batch_op.f('ix_congress_members_bioguide_id'))
        batch_op.drop_index('idx_congress_member_state_district')
        batch_op.drop_index('idx_congress_member_party_chamber')
        batch_op.drop_index('idx_congress_member_name')

    op.drop_table('congress_members')
    with op.batch_alter_table('asset_types', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_asset_types_code'))

    op.drop_table('asset_types')
    # ### end Alembic commands ### 