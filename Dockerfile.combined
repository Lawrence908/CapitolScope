# Build frontend stage
FROM node:20-alpine AS frontend-builder

WORKDIR /app/frontend

# Copy frontend files
COPY frontend/package*.json ./
RUN npm ci

COPY frontend/ ./

# Build the frontend
ARG VITE_API_URL
ENV VITE_API_URL=${VITE_API_URL}
RUN npm run build

# Build backend stage
FROM python:3.12-slim-bookworm AS backend-builder

WORKDIR /build

# Install uv package manager
RUN pip install --no-cache-dir uv

# Copy project files
COPY pyproject.toml .
COPY README.md .
COPY app/ app/

# Install dependencies using uv
RUN uv pip install --no-cache-dir --system .

# Final stage
FROM python:3.12-slim-bookworm

# Create non-root user
RUN adduser --disabled-password --gecos '' appuser

# Install nginx
RUN apt-get update && \
    apt-get install -y nginx curl ca-certificates && \
    rm -rf /var/lib/apt/lists/*

# Set up directory structure
WORKDIR /app
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app/src \
    LOG_DIR=/app/logs

# Create logs directory with proper permissions
RUN mkdir -p /app/logs && \
    chown appuser:appuser /app/logs

# Copy dependencies and application code from backend builder
COPY --from=backend-builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=backend-builder /usr/local/bin /usr/local/bin
COPY app/src/ /app/src/

# Copy Alembic configuration
COPY alembic.ini /app/alembic.ini
COPY alembic/ /app/alembic/

# Copy frontend build
COPY --from=frontend-builder /app/frontend/dist /var/www/html

# Copy nginx config
COPY nginx-combined.conf /etc/nginx/nginx.conf

# Switch to non-root user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD sh -c 'curl -f http://localhost:${PORT:-8080}/health || exit 1'

EXPOSE 8080

# Start both nginx and FastAPI
CMD ["sh", "-c", "nginx && python -m uvicorn main:app --host 0.0.0.0 --port ${PORT:-8080}"]

